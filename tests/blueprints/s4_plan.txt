Terraform will perform the following actions:

  # aws_iam_access_key.cg-shepard will be created
  + resource "aws_iam_access_key" "cg-shepard" {
      + encrypted_secret  = (known after apply)
      + id                = (known after apply)
      + key_fingerprint   = (known after apply)
      + secret            = (sensitive value)
      + ses_smtp_password = (sensitive value)
      + status            = (known after apply)
      + user              = "shepard"
    }

  # aws_iam_access_key.cg-solus will be created
  + resource "aws_iam_access_key" "cg-solus" {
      + encrypted_secret  = (known after apply)
      + id                = (known after apply)
      + key_fingerprint   = (known after apply)
      + secret            = (sensitive value)
      + ses_smtp_password = (sensitive value)
      + status            = (known after apply)
      + user              = "solus"
    }

  # aws_iam_access_key.cg-wrex will be created
  + resource "aws_iam_access_key" "cg-wrex" {
      + encrypted_secret  = (known after apply)
      + id                = (known after apply)
      + key_fingerprint   = (known after apply)
      + secret            = (sensitive value)
      + ses_smtp_password = (sensitive value)
      + status            = (known after apply)
      + user              = "wrex"
    }

  # aws_iam_instance_profile.cg-ec2-instance-profile will be created
  + resource "aws_iam_instance_profile" "cg-ec2-instance-profile" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "cg-ec2-instance-profile-cgidwkzq46fg65"
      + path        = "/"
      + role        = "cg-ec2-role-cgidwkzq46fg65"
      + roles       = (known after apply)
      + unique_id   = (known after apply)
    }

  # aws_iam_policy.cg-ec2-role-policy will be created
  + resource "aws_iam_policy" "cg-ec2-role-policy" {
      + arn         = (known after apply)
      + description = "cg-ec2-role-policy-cgidwkzq46fg65"
      + id          = (known after apply)
      + name        = "cg-ec2-role-policy-cgidwkzq46fg65"
      + path        = "/"
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "s3:*",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = "VisualEditor0"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # aws_iam_policy.cg-shepard-policy will be created
  + resource "aws_iam_policy" "cg-shepard-policy" {
      + arn         = (known after apply)
      + description = "cg-shepard-policy-cgidwkzq46fg65"
      + id          = (known after apply)
      + name        = "cg-shepard-policy-cgidwkzq46fg65"
      + path        = "/"
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = "*"
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = "shepard"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # aws_iam_policy.cg-solus-policy will be created
  + resource "aws_iam_policy" "cg-solus-policy" {
      + arn         = (known after apply)
      + description = "cg-solus-policy-cgidwkzq46fg65"
      + id          = (known after apply)
      + name        = "cg-solus-policy-cgidwkzq46fg65"
      + path        = "/"
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "lambda:Get*",
                          + "lambda:List*",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = "solus"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # aws_iam_policy.cg-wrex-policy will be created
  + resource "aws_iam_policy" "cg-wrex-policy" {
      + arn         = (known after apply)
      + description = "cg-wrex-policy-cgidwkzq46fg65"
      + id          = (known after apply)
      + name        = "cg-wrex-policy-cgidwkzq46fg65"
      + path        = "/"
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "ec2:*",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = "wrex"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # aws_iam_policy_attachment.cg-ec2-role-policy-attachment will be created
  + resource "aws_iam_policy_attachment" "cg-ec2-role-policy-attachment" {
      + id         = (known after apply)
      + name       = "cg-ec2-role-policy-attachment-cgidwkzq46fg65"
      + policy_arn = (known after apply)
      + roles      = [
          + "cg-ec2-role-cgidwkzq46fg65",
        ]
    }

  # aws_iam_role.cg-ec2-role will be created
  + resource "aws_iam_role" "cg-ec2-role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "cg-ec2-role-cgidwkzq46fg65"
      + path                  = "/"
      + tags                  = {
          + "Name"     = "cg-ec2-role-cgidwkzq46fg65"
          + "Scenario" = "ec2-ssrf"
          + "Stack"    = "CloudGoat"
        }
      + unique_id             = (known after apply)
    }

  # aws_iam_role.cg-lambda-role will be created
  + resource "aws_iam_role" "cg-lambda-role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "cg-lambda-role-cgidwkzq46fg65-service-role"
      + path                  = "/"
      + tags                  = {
          + "Name"     = "cg-lambda-role-cgidwkzq46fg65"
          + "Scenario" = "ec2-ssrf"
          + "Stack"    = "CloudGoat"
        }
      + unique_id             = (known after apply)
    }

  # aws_iam_user.cg-shepard will be created
  + resource "aws_iam_user" "cg-shepard" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "shepard"
      + path          = "/"
      + tags          = {
          + "Name"     = "cg-shepard-cgidwkzq46fg65"
          + "Scenario" = "ec2-ssrf"
          + "Stack"    = "CloudGoat"
        }
      + unique_id     = (known after apply)
    }

  # aws_iam_user.cg-solus will be created
  + resource "aws_iam_user" "cg-solus" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "solus"
      + path          = "/"
      + tags          = {
          + "Name"     = "cg-solus-cgidwkzq46fg65"
          + "Scenario" = "ec2-ssrf"
          + "Stack"    = "CloudGoat"
        }
      + unique_id     = (known after apply)
    }

  # aws_iam_user.cg-wrex will be created
  + resource "aws_iam_user" "cg-wrex" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "wrex"
      + path          = "/"
      + tags          = {
          + "Name"     = "cg-wrex-cgidwkzq46fg65"
          + "Scenario" = "ec2-ssrf"
          + "Stack"    = "CloudGoat"
        }
      + unique_id     = (known after apply)
    }

  # aws_iam_user_policy_attachment.cg-shepard-attachment will be created
  + resource "aws_iam_user_policy_attachment" "cg-shepard-attachment" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + user       = "shepard"
    }

  # aws_iam_user_policy_attachment.cg-solus-attachment will be created
  + resource "aws_iam_user_policy_attachment" "cg-solus-attachment" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + user       = "solus"
    }

  # aws_iam_user_policy_attachment.cg-wrex-attachment will be created
  + resource "aws_iam_user_policy_attachment" "cg-wrex-attachment" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + user       = "wrex"
    }

  # aws_instance.cg-ubuntu-ec2 will be created
  + resource "aws_instance" "cg-ubuntu-ec2" {
      + ami                          = "ami-0a313d6098716f372"
      + arn                          = (known after apply)
      + associate_public_ip_address  = true
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + iam_instance_profile         = "cg-ec2-instance-profile-cgidwkzq46fg65"
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "cg-ec2-key-pair-cgidwkzq46fg65"
      + network_interface_id         = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = (known after apply)
      + tags                         = {
          + "Name"     = "cg-ubuntu-ec2-cgidwkzq46fg65"
          + "Scenario" = "ec2-ssrf"
          + "Stack"    = "CloudGoat"
        }
      + tenancy                      = (known after apply)
      + user_data                    = "1a478a0241306d6a882ce32f76871a06afbe93e6"
      + volume_tags                  = {
          + "Name"     = "CloudGoat cgidwkzq46fg65 EC2 Instance Root Device"
          + "Scenario" = "ec2-ssrf"
          + "Stack"    = "CloudGoat"
        }
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = true
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 8
          + volume_type           = "gp2"
        }
    }

  # aws_internet_gateway.cg-internet-gateway will be created
  + resource "aws_internet_gateway" "cg-internet-gateway" {
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name"     = "CloudGoat cgidwkzq46fg65 Internet Gateway"
          + "Scenario" = "ec2-ssrf"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id   = (known after apply)
    }

  # aws_key_pair.cg-ec2-key-pair will be created
  + resource "aws_key_pair" "cg-ec2-key-pair" {
      + fingerprint = (known after apply)
      + id          = (known after apply)
      + key_name    = "cg-ec2-key-pair-cgidwkzq46fg65"
      + public_key  = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCswfM+yyqVeWUrzHLsV+rBHByIBo24yHfJ2BZBrNYAoDHYXbaiQSfNukvqG9l9r9laIDhNR0yReIKU6EryQA6ukYQTIqEFdE8Bk3SzKa0xmVG0uT8ZO3Kp/5OE1ivMF5sNK3fnxHpVxXimWqrYVDljYwlODLH/GqfylIXb6VO2IGFJHi3O8EPXw+lIGBPpDSHOgyJyK9QI48wpqP8WeFHLmSwVONQz92/Gph/XXs0qIYepjo0w5zSnFt86DRgbxCReEGFbzRdpPJRPpa1J1uo3eSJhCD9Bh2FvTYjEu8yNRpDIQl95YXbIUgnC52xIM+OwSu5Jc1D/+gLgrszgsXbz+BEr9Mu4YlmZ6R+1jq3E6adVD027rQ2/jjVk+ihUMA0xDm1elg9M0iE2E//WY5ZTHzZdvBwG3zVlYgx1LTcVkkgZseo+DHwdJf2uooqxt4P09JqvSsmiQgUS9/tIAYoq9NqZe23MojLqImkHQMn3D31SX0KnkInpO2HRyBcD9m/uBYWvXDC9K75QWJ6n00ZCQ8TZHEuBfhctMH8N/ZvDu3BmHgddKHdS2xt8FtALh4FuOIpas+PUBmGeVHHlLEgcB1jRiNV6+mwbOJHhBm4QxnfPtZ4+SHvriNpo/2ZZIwpXdBBny1Sx/15Ej8B6dcp6IBOZX1TaiK86O1e2XB728Q== viktor@viktor-Latitude-5490"
    }

  # aws_lambda_function.cg-lambda-function will be created
  + resource "aws_lambda_function" "cg-lambda-function" {
      + arn                            = (known after apply)
      + filename                       = "../assets/lambda.zip"
      + function_name                  = "cg-lambda-cgidwkzq46fg65"
      + handler                        = "lambda.handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.6"
      + source_code_hash               = "xt7bNZt3fzxtjSRjnuCKLV/dOnRCTVKM3D1u/BeK8zA="
      + source_code_size               = (known after apply)
      + tags                           = {
          + "Name"     = "cg-lambda-cgidwkzq46fg65"
          + "Scenario" = "ec2-ssrf"
          + "Stack"    = "CloudGoat"
        }
      + timeout                        = 3
      + version                        = (known after apply)

      + environment {
          + variables = (known after apply)
        }

      + tracing_config {
          + mode = (known after apply)
        }
    }

  # aws_route_table.cg-public-subnet-route-table will be created
  + resource "aws_route_table" "cg-public-subnet-route-table" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = (known after apply)
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = ""
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = {
          + "Name"     = "CloudGoat cgidwkzq46fg65 Route Table for Public Subnet"
          + "Scenario" = "ec2-ssrf"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.cg-public-subnet-1-route-association will be created
  + resource "aws_route_table_association" "cg-public-subnet-1-route-association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.cg-public-subnet-2-route-association will be created
  + resource "aws_route_table_association" "cg-public-subnet-2-route-association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_s3_bucket.cg-secret-s3-bucket will be created
  + resource "aws_s3_bucket" "cg-secret-s3-bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "cg-secret-s3-bucket-cgidwkzq46fg65"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = true
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Description" = "CloudGoat cgidwkzq46fg65 S3 Bucket used for storing a secret"
          + "Name"        = "cg-secret-s3-bucket-cgidwkzq46fg65"
          + "Scenario"    = "ec2-ssrf"
          + "Stack"       = "CloudGoat"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

  # aws_s3_bucket_object.cg-shepards-credentials will be created
  + resource "aws_s3_bucket_object" "cg-shepards-credentials" {
      + acl                    = "private"
      + bucket                 = (known after apply)
      + content_type           = (known after apply)
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "admin-user.txt"
      + server_side_encryption = (known after apply)
      + source                 = "../assets/admin-user.txt"
      + storage_class          = (known after apply)
      + tags                   = {
          + "Name"     = "cg-shepards-credentials-cgidwkzq46fg65"
          + "Scenario" = "ec2-ssrf"
          + "Stack"    = "CloudGoat"
        }
      + version_id             = (known after apply)
    }

  # aws_security_group.cg-ec2-http-security-group will be created
  + resource "aws_security_group" "cg-ec2-http-security-group" {
      + arn                    = (known after apply)
      + description            = "CloudGoat cgidwkzq46fg65 Security Group for EC2 Instance over HTTP"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "130.237.6.63/32",
                ]
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "cg-ec2-http-cgidwkzq46fg65"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name"     = "cg-ec2-http-cgidwkzq46fg65"
          + "Scenario" = "ec2-ssrf"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.cg-ec2-ssh-security-group will be created
  + resource "aws_security_group" "cg-ec2-ssh-security-group" {
      + arn                    = (known after apply)
      + description            = "CloudGoat cgidwkzq46fg65 Security Group for EC2 Instance over SSH"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "130.237.6.63/32",
                ]
              + description      = ""
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "cg-ec2-ssh-cgidwkzq46fg65"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name"     = "cg-ec2-ssh-cgidwkzq46fg65"
          + "Scenario" = "ec2-ssrf"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.cg-public-subnet-1 will be created
  + resource "aws_subnet" "cg-public-subnet-1" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.10.10.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name"     = "CloudGoat cgidwkzq46fg65 Public Subnet #1"
          + "Scenario" = "ec2-ssrf"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.cg-public-subnet-2 will be created
  + resource "aws_subnet" "cg-public-subnet-2" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.10.20.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name"     = "CloudGoat cgidwkzq46fg65 Public Subnet #2"
          + "Scenario" = "ec2-ssrf"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_vpc.cg-vpc will be created
  + resource "aws_vpc" "cg-vpc" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "10.10.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = (known after apply)
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = true
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags                             = {
          + "Name"     = "CloudGoat cgidwkzq46fg65 VPC"
          + "Scenario" = "ec2-ssrf"
          + "Stack"    = "CloudGoat"
        }
    }

  # null_resource.cg-create-latest-passwords-list-file will be created
  + resource "null_resource" "cg-create-latest-passwords-list-file" {
      + id = (known after apply)
    }

  # null_resource.cg-create-sheperds-credentials-file will be created
  + resource "null_resource" "cg-create-sheperds-credentials-file" {
      + id = (known after apply)
    }
