Terraform will perform the following actions:

  # aws_db_instance.cg-psql-rds will be created
  + resource "aws_db_instance" "cg-psql-rds" {
      + address                               = (known after apply)
      + allocated_storage                     = 20
      + apply_immediately                     = true
      + arn                                   = (known after apply)
      + auto_minor_version_upgrade            = true
      + availability_zone                     = (known after apply)
      + backup_retention_period               = (known after apply)
      + backup_window                         = (known after apply)
      + ca_cert_identifier                    = (known after apply)
      + character_set_name                    = (known after apply)
      + copy_tags_to_snapshot                 = false
      + db_subnet_group_name                  = (known after apply)
      + endpoint                              = (known after apply)
      + engine                                = "postgres"
      + engine_version                        = "9.6"
      + hosted_zone_id                        = (known after apply)
      + id                                    = (known after apply)
      + identifier                            = "cg-rds-instance-cgidehturfzo0y"
      + identifier_prefix                     = (known after apply)
      + instance_class                        = "db.t2.micro"
      + kms_key_id                            = (known after apply)
      + license_model                         = (known after apply)
      + maintenance_window                    = (known after apply)
      + monitoring_interval                   = 0
      + monitoring_role_arn                   = (known after apply)
      + multi_az                              = false
      + name                                  = "cloudgoat"
      + option_group_name                     = (known after apply)
      + parameter_group_name                  = (known after apply)
      + password                              = (sensitive value)
      + performance_insights_enabled          = false
      + performance_insights_kms_key_id       = (known after apply)
      + performance_insights_retention_period = (known after apply)
      + port                                  = 5432
      + publicly_accessible                   = false
      + replicas                              = (known after apply)
      + resource_id                           = (known after apply)
      + skip_final_snapshot                   = true
      + status                                = (known after apply)
      + storage_type                          = "gp2"
      + tags                                  = {
          + "Name"     = "cg-rds-instance-cgidehturfzo0y"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + timezone                              = (known after apply)
      + username                              = "cgadmin"
      + vpc_security_group_ids                = (known after apply)
    }

  # aws_db_subnet_group.cg-rds-subnet-group will be created
  + resource "aws_db_subnet_group" "cg-rds-subnet-group" {
      + arn         = (known after apply)
      + description = "CloudGoat cgidehturfzo0y Subnet Group"
      + id          = (known after apply)
      + name        = "cloud-goat-rds-subnet-group-cgidehturfzo0y"
      + name_prefix = (known after apply)
      + subnet_ids  = (known after apply)
      + tags        = {
          + "Name"     = "cloud-goat-rds-subnet-group-cgidehturfzo0y"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
    }

  # aws_iam_access_key.cg-lara will be created
  + resource "aws_iam_access_key" "cg-lara" {
      + encrypted_secret  = (known after apply)
      + id                = (known after apply)
      + key_fingerprint   = (known after apply)
      + secret            = (sensitive value)
      + ses_smtp_password = (sensitive value)
      + status            = (known after apply)
      + user              = "lara"
    }

  # aws_iam_access_key.cg-mcduck will be created
  + resource "aws_iam_access_key" "cg-mcduck" {
      + encrypted_secret  = (known after apply)
      + id                = (known after apply)
      + key_fingerprint   = (known after apply)
      + secret            = (sensitive value)
      + ses_smtp_password = (sensitive value)
      + status            = (known after apply)
      + user              = "McDuck"
    }

  # aws_iam_instance_profile.cg-ec2-instance-profile will be created
  + resource "aws_iam_instance_profile" "cg-ec2-instance-profile" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "cg-ec2-instance-profile-cgidehturfzo0y"
      + path        = "/"
      + role        = "cg-ec2-role-cgidehturfzo0y"
      + roles       = (known after apply)
      + unique_id   = (known after apply)
    }

  # aws_iam_policy.cg-ec2-rds-policy will be created
  + resource "aws_iam_policy" "cg-ec2-rds-policy" {
      + arn         = (known after apply)
      + description = "cg-ec2-rds-policy"
      + id          = (known after apply)
      + name        = "cg-ec2-rds-policy"
      + path        = "/"
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "ec2:DescribeInstances",
                          + "ec2:DescribeVpcs",
                          + "ec2:DescribeSubnets",
                          + "ec2:DescribeSecurityGroups",
                          + "rds:DescribeDBInstances",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # aws_iam_policy.cg-lara-policy will be created
  + resource "aws_iam_policy" "cg-lara-policy" {
      + arn         = (known after apply)
      + description = "cg-lara-policy"
      + id          = (known after apply)
      + name        = "cg-lara-s3-policy"
      + path        = "/"
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "s3:ListBucket",
                        ]
                      + Effect   = "Allow"
                      + Resource = "arn:aws:s3:::cg-logs-s3-bucket-cgidehturfzo0y"
                    },
                  + {
                      + Action   = [
                          + "s3:GetObject",
                        ]
                      + Effect   = "Allow"
                      + Resource = "arn:aws:s3:::cg-logs-s3-bucket-cgidehturfzo0y/*"
                    },
                  + {
                      + Action   = [
                          + "s3:ListAllMyBuckets",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = [
                          + "ec2:DescribeInstances",
                          + "ec2:DescribeVpcs",
                          + "ec2:DescribeSubnets",
                          + "ec2:DescribeSecurityGroups",
                          + "rds:DescribeDBInstances",
                          + "elasticloadbalancing:DescribeLoadBalancers",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # aws_iam_policy.cg-mcduck-policy will be created
  + resource "aws_iam_policy" "cg-mcduck-policy" {
      + arn         = (known after apply)
      + description = "cg-mcduck-policy"
      + id          = (known after apply)
      + name        = "cg-mcduck-s3-policy"
      + path        = "/"
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "s3:ListBucket",
                        ]
                      + Effect   = "Allow"
                      + Resource = "arn:aws:s3:::cg-keystore-s3-bucket-cgidehturfzo0y"
                    },
                  + {
                      + Action   = [
                          + "s3:GetObject",
                        ]
                      + Effect   = "Allow"
                      + Resource = "arn:aws:s3:::cg-keystore-s3-bucket-cgidehturfzo0y/*"
                    },
                  + {
                      + Action   = [
                          + "s3:ListAllMyBuckets",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = [
                          + "ec2:DescribeInstances",
                          + "ec2:DescribeVpcs",
                          + "ec2:DescribeSubnets",
                          + "ec2:DescribeSecurityGroups",
                          + "rds:DescribeDBInstances",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # aws_iam_role.cg-ec2-role will be created
  + resource "aws_iam_role" "cg-ec2-role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "cg-ec2-role-cgidehturfzo0y"
      + path                  = "/"
      + tags                  = {
          + "Name"     = "cg-ec2-role-cgidehturfzo0y"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy_attachment.cg-ec2-role-policy-attachment-rds will be created
  + resource "aws_iam_role_policy_attachment" "cg-ec2-role-policy-attachment-rds" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "cg-ec2-role-cgidehturfzo0y"
    }

  # aws_iam_role_policy_attachment.cg-ec2-role-policy-attachment-s3 will be created
  + resource "aws_iam_role_policy_attachment" "cg-ec2-role-policy-attachment-s3" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      + role       = "cg-ec2-role-cgidehturfzo0y"
    }

  # aws_iam_user.cg-lara will be created
  + resource "aws_iam_user" "cg-lara" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "lara"
      + path          = "/"
      + tags          = {
          + "Name"     = "cg-lara-cgidehturfzo0y"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + unique_id     = (known after apply)
    }

  # aws_iam_user.cg-mcduck will be created
  + resource "aws_iam_user" "cg-mcduck" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "McDuck"
      + path          = "/"
      + tags          = {
          + "Name"     = "cg-mcduck-cgidehturfzo0y"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + unique_id     = (known after apply)
    }

  # aws_iam_user_policy_attachment.cg-lara-attachment will be created
  + resource "aws_iam_user_policy_attachment" "cg-lara-attachment" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + user       = "lara"
    }

  # aws_iam_user_policy_attachment.cg-mcduck-attachment will be created
  + resource "aws_iam_user_policy_attachment" "cg-mcduck-attachment" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + user       = "McDuck"
    }

  # aws_instance.cg-ubuntu-ec2 will be created
  + resource "aws_instance" "cg-ubuntu-ec2" {
      + ami                          = "ami-0a313d6098716f372"
      + arn                          = (known after apply)
      + associate_public_ip_address  = true
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + iam_instance_profile         = "cg-ec2-instance-profile-cgidehturfzo0y"
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "cg-ec2-key-pair-cgidehturfzo0y"
      + network_interface_id         = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = (known after apply)
      + tags                         = {
          + "Name"     = "cg-ubuntu-ec2-cgidehturfzo0y"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + tenancy                      = (known after apply)
      + user_data                    = (known after apply)
      + volume_tags                  = {
          + "Name"     = "CloudGoat cgidehturfzo0y EC2 Instance Root Device"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = true
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 8
          + volume_type           = "gp2"
        }
    }

  # aws_internet_gateway.cg-internet-gateway will be created
  + resource "aws_internet_gateway" "cg-internet-gateway" {
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name"     = "CloudGoat Internet Gateway"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id   = (known after apply)
    }

  # aws_key_pair.cg-ec2-key-pair will be created
  + resource "aws_key_pair" "cg-ec2-key-pair" {
      + fingerprint = (known after apply)
      + id          = (known after apply)
      + key_name    = "cg-ec2-key-pair-cgidehturfzo0y"
      + public_key  = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDEUQkFj3cIHeBkSNaK7xyxZ9GSzJs+CWInM2bLKBHSBKtesvXwgfyTOqYyBLU3jyOzEndKTMW53Ri0LdLcNJOKB42OTItnUvuhIpi/yk6rfoyVT+MC49LBTWt9BaEFcktsRB/PN7ZCVTigBefq89P8oc0OB8lZ0CCU8h0hFRWFu+k5r9uDevaVLvg1R3g95x1enBrnpXS06yl7GCP73uoMeSUq/4efvGMfIC/llrENUbbPuVUrcMt+GZPPac6PZoj37clKkkUPjZdB40Ao/VYTXweBpm8wf4IVjwFa6UDw/29YPID4bnlgkJZyXqo17tnf3V8S+wOjyBtdzrSj3lIpW9ye+ykWgEHhlQQSbYRJrkk7uVdmTjCh8KDKw17aeuCRco8r+PHA6xCwduCbyc9eg9zawjsKuX7co2PGd4z3b5VdPGlASZahtgvulKklp6/X7rmTJMggYbbVdptSwAuGmFXOCq4vyAByqTKXlzVJitqa8pN+x2dBlyoVt5TWyaccUC3yZz1XWL6/53Yrtb5SYK0E5m8ThZGq1iMHOHzPErrfImCxC3rLu0yFYtstWKIILLcBx6UaW9vkc8YGNGR8krEZUW6BmEfckiYpyL1f/kOacJ3oAFKGP6+oNEZwM3yHLM65KGdLoPIs3wXcIC3Ma/BwerZruhAqBBl8Dz/NEw== viktor@viktor-Latitude-5490"
    }

  # aws_lb.cg-lb will be created
  + resource "aws_lb" "cg-lb" {
      + arn                        = (known after apply)
      + arn_suffix                 = (known after apply)
      + dns_name                   = (known after apply)
      + enable_deletion_protection = false
      + enable_http2               = true
      + id                         = (known after apply)
      + idle_timeout               = 60
      + internal                   = false
      + ip_address_type            = "ipv4"
      + load_balancer_type         = "application"
      + name                       = "cg-lb-cgidehturfzo0y"
      + security_groups            = (known after apply)
      + subnets                    = (known after apply)
      + tags                       = {
          + "Name"     = "cg-lb-cgidehturfzo0y"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id                     = (known after apply)
      + zone_id                    = (known after apply)

      + access_logs {
          + bucket  = "cg-logs-s3-bucket-cgidehturfzo0y"
          + enabled = true
          + prefix  = "cg-lb-logs"
        }

      + subnet_mapping {
          + allocation_id = (known after apply)
          + subnet_id     = (known after apply)
        }
    }

  # aws_lb_listener.cg-lb-listener will be created
  + resource "aws_lb_listener" "cg-lb-listener" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + load_balancer_arn = (known after apply)
      + port              = 80
      + protocol          = "HTTP"
      + ssl_policy        = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }
    }

  # aws_lb_target_group.cg-target-group will be created
  + resource "aws_lb_target_group" "cg-target-group" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + deregistration_delay               = 300
      + id                                 = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + name                               = "cg-target-group-cgidehturfzo0y"
      + port                               = 9000
      + protocol                           = "HTTP"
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "Name"     = "cg-target-group-cgidehturfzo0y"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + target_type                        = "instance"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = (known after apply)
          + healthy_threshold   = (known after apply)
          + interval            = (known after apply)
          + matcher             = (known after apply)
          + path                = (known after apply)
          + port                = (known after apply)
          + protocol            = (known after apply)
          + timeout             = (known after apply)
          + unhealthy_threshold = (known after apply)
        }

      + stickiness {
          + cookie_duration = (known after apply)
          + enabled         = (known after apply)
          + type            = (known after apply)
        }
    }

  # aws_lb_target_group_attachment.cg-target-group-attachment will be created
  + resource "aws_lb_target_group_attachment" "cg-target-group-attachment" {
      + id               = (known after apply)
      + port             = 9000
      + target_group_arn = (known after apply)
      + target_id        = (known after apply)
    }

  # aws_route_table.cg-private-subnet-route-table will be created
  + resource "aws_route_table" "cg-private-subnet-route-table" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Name"     = "CloudGoat Route Table for Private Subnet"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table.cg-public-subnet-route-table will be created
  + resource "aws_route_table" "cg-public-subnet-route-table" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = (known after apply)
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = ""
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = {
          + "Name"     = "CloudGoat Route Table for Public Subnet"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.cg-priate-subnet-1-route-association will be created
  + resource "aws_route_table_association" "cg-priate-subnet-1-route-association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.cg-priate-subnet-2-route-association will be created
  + resource "aws_route_table_association" "cg-priate-subnet-2-route-association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.cg-public-subnet-1-route-association will be created
  + resource "aws_route_table_association" "cg-public-subnet-1-route-association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.cg-public-subnet-2-route-association will be created
  + resource "aws_route_table_association" "cg-public-subnet-2-route-association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_s3_bucket.cg-keystore-s3-bucket will be created
  + resource "aws_s3_bucket" "cg-keystore-s3-bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "cg-keystore-s3-bucket-cgidehturfzo0y"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = true
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Description" = "CloudGoat cgidehturfzo0y S3 Bucket used for storing ssh keys"
          + "Name"        = "cg-keystore-s3-bucket-cgidehturfzo0y"
          + "Scenario"    = "rce-web-app"
          + "Stack"       = "CloudGoat"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

  # aws_s3_bucket.cg-logs-s3-bucket will be created
  + resource "aws_s3_bucket" "cg-logs-s3-bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "cg-logs-s3-bucket-cgidehturfzo0y"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = true
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Description" = "CloudGoat cgidehturfzo0y S3 Bucket used for ALB Logs"
          + "Name"        = "cg-logs-s3-bucket-cgidehturfzo0y"
          + "Scenario"    = "rce-web-app"
          + "Stack"       = "CloudGoat"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

  # aws_s3_bucket.cg-secret-s3-bucket will be created
  + resource "aws_s3_bucket" "cg-secret-s3-bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "cg-secret-s3-bucket-cgidehturfzo0y"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = true
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Description" = "CloudGoat cgidehturfzo0y S3 Bucket used for storing a secret"
          + "Name"        = "cg-secret-s3-bucket-cgidehturfzo0y"
          + "Scenario"    = "rce-web-app"
          + "Stack"       = "CloudGoat"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

  # aws_s3_bucket_object.cg-db-credentials-file will be created
  + resource "aws_s3_bucket_object" "cg-db-credentials-file" {
      + acl                    = "private"
      + bucket                 = (known after apply)
      + content_type           = (known after apply)
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "db.txt"
      + server_side_encryption = (known after apply)
      + source                 = "../assets/db.txt"
      + storage_class          = (known after apply)
      + tags                   = {
          + "Name"     = "cg-db-credentials-file-cgidehturfzo0y"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + version_id             = (known after apply)
    }

  # aws_s3_bucket_object.cg-lb-log-file will be created
  + resource "aws_s3_bucket_object" "cg-lb-log-file" {
      + acl                    = "private"
      + bucket                 = (known after apply)
      + content_type           = (known after apply)
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "cg-lb-logs/AWSLogs/320603597426/elasticloadbalancing/us-east-1/2019/06/19/555555555555_elasticloadbalancing_us-east-1_app.cg-lb-cgidp347lhz47g.d36d4f13b73c2fe7_20190618T2140Z_10.10.10.100_5m9btchz.log"
      + server_side_encryption = (known after apply)
      + source                 = "../assets/555555555555_elasticloadbalancing_us-east-1_app.cg-lb-cgidp347lhz47g.d36d4f13b73c2fe7_20190618T2140Z_10.10.10.100_5m9btchz.log"
      + storage_class          = (known after apply)
      + tags                   = {
          + "Name"     = "cg-lb-log-file-cgidehturfzo0y"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + version_id             = (known after apply)
    }

  # aws_s3_bucket_object.cg-ssh-private-key-file will be created
  + resource "aws_s3_bucket_object" "cg-ssh-private-key-file" {
      + acl                    = "private"
      + bucket                 = (known after apply)
      + content_type           = (known after apply)
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "cloudgoat"
      + server_side_encryption = (known after apply)
      + source                 = "../cloudgoat"
      + storage_class          = (known after apply)
      + tags                   = {
          + "Name"     = "cg-ssh-private-key-file-cgidehturfzo0y"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + version_id             = (known after apply)
    }

  # aws_s3_bucket_object.cg-ssh-public-key-file will be created
  + resource "aws_s3_bucket_object" "cg-ssh-public-key-file" {
      + acl                    = "private"
      + bucket                 = (known after apply)
      + content_type           = (known after apply)
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "cloudgoat.pub"
      + server_side_encryption = (known after apply)
      + source                 = "../cloudgoat.pub"
      + storage_class          = (known after apply)
      + tags                   = {
          + "Name"     = "cg-ssh-public-key-file-cgidehturfzo0y"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + version_id             = (known after apply)
    }

  # aws_s3_bucket_policy.cg-logs-s3-bucket-policy will be created
  + resource "aws_s3_bucket_policy" "cg-logs-s3-bucket-policy" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # aws_security_group.cg-ec2-http-security-group will be created
  + resource "aws_security_group" "cg-ec2-http-security-group" {
      + arn                    = (known after apply)
      + description            = "CloudGoat cgidehturfzo0y Security Group for EC2 Instance over HTTP"
      + egress                 = [
          + {
              + cidr_blocks      = []
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + description      = ""
              + from_port        = 9000
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 9000
            },
        ]
      + name                   = "cg-ec2-http-cgidehturfzo0y"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name"     = "cg-ec2-http-cgidehturfzo0y"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.cg-ec2-ssh-security-group will be created
  + resource "aws_security_group" "cg-ec2-ssh-security-group" {
      + arn                    = (known after apply)
      + description            = "CloudGoat cgidehturfzo0y Security Group for EC2 Instance over SSH"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "130.237.6.91/32",
                ]
              + description      = ""
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "cg-ec2-ssh-cgidehturfzo0y"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name"     = "cg-ec2-ssh-cgidehturfzo0y"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.cg-lb-http-security-group will be created
  + resource "aws_security_group" "cg-lb-http-security-group" {
      + arn                    = (known after apply)
      + description            = "CloudGoat cgidehturfzo0y Security Group for Application Load Balancer over HTTP"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "130.237.6.91/32",
                ]
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "cg-lb-http-cgidehturfzo0y"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name"     = "cg-lb-http-cgidehturfzo0y"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.cg-rds-security-group will be created
  + resource "aws_security_group" "cg-rds-security-group" {
      + arn                    = (known after apply)
      + description            = "CloudGoat cgidehturfzo0y Security Group for PostgreSQL RDS Instance"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "10.0.10.0/24",
                  + "10.0.20.0/24",
                  + "10.0.30.0/24",
                  + "10.0.40.0/24",
                ]
              + description      = ""
              + from_port        = 5432
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 5432
            },
        ]
      + name                   = "cg-rds-psql-cgidehturfzo0y"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name"     = "cg-rds-psql-cgidehturfzo0y"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.cg-private-subnet-1 will be created
  + resource "aws_subnet" "cg-private-subnet-1" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.30.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name"     = "CloudGoat Private Subnet #1"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.cg-private-subnet-2 will be created
  + resource "aws_subnet" "cg-private-subnet-2" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.40.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name"     = "CloudGoat Private Subnet #2"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.cg-public-subnet-1 will be created
  + resource "aws_subnet" "cg-public-subnet-1" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.10.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name"     = "CloudGoat Public Subnet #1"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.cg-public-subnet-2 will be created
  + resource "aws_subnet" "cg-public-subnet-2" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.20.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name"     = "CloudGoat Public Subnet #2"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_vpc.cg-vpc will be created
  + resource "aws_vpc" "cg-vpc" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "10.0.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = (known after apply)
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = true
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags                             = {
          + "Name"     = "CloudGoat VPC"
          + "Scenario" = "rce-web-app"
          + "Stack"    = "CloudGoat"
        }
    }
