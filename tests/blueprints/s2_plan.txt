Terraform will perform the following actions:

  # aws_iam_instance_profile.cg-ec2-instance-profile will be created
  + resource "aws_iam_instance_profile" "cg-ec2-instance-profile" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "cg-ec2-instance-profile-cgidz8xnxmfsym"
      + path        = "/"
      + role        = "cg-banking-WAF-Role-cgidz8xnxmfsym"
      + roles       = (known after apply)
      + unique_id   = (known after apply)
    }

  # aws_iam_role.cg-banking-WAF-Role will be created
  + resource "aws_iam_role" "cg-banking-WAF-Role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "cg-banking-WAF-Role-cgidz8xnxmfsym"
      + path                  = "/"
      + tags                  = {
          + "Name"     = "cg-banking-WAF-Role-cgidz8xnxmfsym"
          + "Scenario" = "cloud-breach-s3"
          + "Stack"    = "CloudGoat"
        }
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy_attachment.cg-banking-WAF-Role-policy-attachment-s3 will be created
  + resource "aws_iam_role_policy_attachment" "cg-banking-WAF-Role-policy-attachment-s3" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      + role       = "cg-banking-WAF-Role-cgidz8xnxmfsym"
    }

  # aws_instance.ec2-vulnerable-proxy-server will be created
  + resource "aws_instance" "ec2-vulnerable-proxy-server" {
      + ami                          = "ami-0a313d6098716f372"
      + arn                          = (known after apply)
      + associate_public_ip_address  = true
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + iam_instance_profile         = "cg-ec2-instance-profile-cgidz8xnxmfsym"
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "cg-ec2-key-pair-cgidz8xnxmfsym"
      + network_interface_id         = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = (known after apply)
      + tags                         = {
          + "Name"     = "ec2-vulnerable-proxy-server-cgidz8xnxmfsym"
          + "Scenario" = "cloud-breach-s3"
          + "Stack"    = "CloudGoat"
        }
      + tenancy                      = (known after apply)
      + user_data                    = "f2df290268343c582e0b5c4ff9014f0552c77089"
      + volume_tags                  = {
          + "Name"     = "CloudGoat cgidz8xnxmfsym EC2 Instance Root Device"
          + "Scenario" = "cloud-breach-s3"
          + "Stack"    = "CloudGoat"
        }
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = true
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 8
          + volume_type           = "gp2"
        }
    }

  # aws_internet_gateway.cg-internet-gateway will be created
  + resource "aws_internet_gateway" "cg-internet-gateway" {
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name"     = "CloudGoat cgidz8xnxmfsym Internet Gateway"
          + "Scenario" = "cloud-breach-s3"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id   = (known after apply)
    }

  # aws_key_pair.cg-ec2-key-pair will be created
  + resource "aws_key_pair" "cg-ec2-key-pair" {
      + fingerprint = (known after apply)
      + id          = (known after apply)
      + key_name    = "cg-ec2-key-pair-cgidz8xnxmfsym"
      + public_key  = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC6o6lOrPyPiAJZu0kUIZZCpq0oRUg+HnnEhmW+WOBHe83lhcaVL+fvGAw0x/0nyqjyyAlQUIwr+7v/LLvCt1QnwqaswzS6348rkJJUhwSo/h4BgVacrRKDLbybrLS0jlVFPPqHBWqYwCdNKu92vEYRhz4K3HhpKORKDnRomPAlwhBus3l7+w/qkK6dpItFiWemhrn40IUdd+FklCDuRqf6xrsT2kan47YdgR2vYZMORIryMblgn1ldpCLLFy/tkr+h+G1tRWWY1+9lYWjrzCLtrQekQL30NTKlXeKm1lPhqlv5OUl8883Fz6B/vIPYkSaJ2rULxIzuZSAUx5lzcYbbWONbbf4ciJX2rcsHrChk658BwsKcbjJbeOqsmoWrW/asSVj+MB2Gt3zx29MZZJWfGciiM+hLGzL39nrS7GB9fm5mhrPg3peQO6gleZ0n/BKupba2OeL+9gxj6X6qLo8F2Vni6aD020c0jgsSZgSXTjf4gDt7B42z51Uo0yVWc16jU4gmDuUu+SEXBehS0mwG+OkzCxkJQN1Nj3/a1Ab49QOlzyVQ+gDVC6XfFQrSD9Sm8lgZgcs84pN8fgdHe8OPXbt0XeaYaxXGA4EUJuSgq3Q4EgPEZZc7KMYVBOoN5DW17vZCEu/wmp6h58U4iha2Jmwh8WDltp3ddxBRjQSSeQ== viktor@viktor-Latitude-5490"
    }

  # aws_route_table.cg-public-subnet-route-table will be created
  + resource "aws_route_table" "cg-public-subnet-route-table" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = (known after apply)
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = ""
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = {
          + "Name"     = "CloudGoat cgidz8xnxmfsym Route Table for Public Subnet"
          + "Scenario" = "cloud-breach-s3"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.cg-public-subnet-1-route-association will be created
  + resource "aws_route_table_association" "cg-public-subnet-1-route-association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.cg-public-subnet-2-route-association will be created
  + resource "aws_route_table_association" "cg-public-subnet-2-route-association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_s3_bucket.cg-cardholder-data-bucket will be created
  + resource "aws_s3_bucket" "cg-cardholder-data-bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "cg-cardholder-data-bucket-cgidz8xnxmfsym"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = true
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Description" = "CloudGoat cgidz8xnxmfsym S3 Bucket used for storing sensitive cardholder data."
          + "Name"        = "cg-cardholder-data-bucket-cgidz8xnxmfsym"
          + "Scenario"    = "cloud-breach-s3"
          + "Stack"       = "CloudGoat"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

  # aws_s3_bucket_object.cardholder-data-corporate will be created
  + resource "aws_s3_bucket_object" "cardholder-data-corporate" {
      + acl                    = "private"
      + bucket                 = (known after apply)
      + content_type           = (known after apply)
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "cardholders_corporate.csv"
      + server_side_encryption = (known after apply)
      + source                 = "../assets/cardholders_corporate.csv"
      + storage_class          = (known after apply)
      + tags                   = {
          + "Name"     = "cardholder-data-cgidz8xnxmfsym"
          + "Scenario" = "cloud-breach-s3"
          + "Stack"    = "CloudGoat"
        }
      + version_id             = (known after apply)
    }

  # aws_s3_bucket_object.cardholder-data-primary will be created
  + resource "aws_s3_bucket_object" "cardholder-data-primary" {
      + acl                    = "private"
      + bucket                 = (known after apply)
      + content_type           = (known after apply)
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "cardholder_data_primary.csv"
      + server_side_encryption = (known after apply)
      + source                 = "../assets/cardholder_data_primary.csv"
      + storage_class          = (known after apply)
      + tags                   = {
          + "Name"     = "cardholder-data-cgidz8xnxmfsym"
          + "Scenario" = "cloud-breach-s3"
          + "Stack"    = "CloudGoat"
        }
      + version_id             = (known after apply)
    }

  # aws_s3_bucket_object.cardholder-data-secondary will be created
  + resource "aws_s3_bucket_object" "cardholder-data-secondary" {
      + acl                    = "private"
      + bucket                 = (known after apply)
      + content_type           = (known after apply)
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "cardholder_data_secondary.csv"
      + server_side_encryption = (known after apply)
      + source                 = "../assets/cardholder_data_secondary.csv"
      + storage_class          = (known after apply)
      + tags                   = {
          + "Name"     = "cardholder-data-cgidz8xnxmfsym"
          + "Scenario" = "cloud-breach-s3"
          + "Stack"    = "CloudGoat"
        }
      + version_id             = (known after apply)
    }

  # aws_s3_bucket_object.goat will be created
  + resource "aws_s3_bucket_object" "goat" {
      + acl                    = "private"
      + bucket                 = (known after apply)
      + content_type           = (known after apply)
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "goat.png"
      + server_side_encryption = (known after apply)
      + source                 = "../assets/goat.png"
      + storage_class          = (known after apply)
      + tags                   = {
          + "Name"     = "cardholder-data-cgidz8xnxmfsym"
          + "Scenario" = "cloud-breach-s3"
          + "Stack"    = "CloudGoat"
        }
      + version_id             = (known after apply)
    }

  # aws_security_group.cg-ec2-http-security-group will be created
  + resource "aws_security_group" "cg-ec2-http-security-group" {
      + arn                    = (known after apply)
      + description            = "CloudGoat cgidz8xnxmfsym Security Group for EC2 Instance over HTTP"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "130.237.6.63/32",
                ]
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "cg-ec2-http-cgidz8xnxmfsym"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name"     = "cg-ec2-http-cgidz8xnxmfsym"
          + "Scenario" = "cloud-breach-s3"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.cg-ec2-ssh-security-group will be created
  + resource "aws_security_group" "cg-ec2-ssh-security-group" {
      + arn                    = (known after apply)
      + description            = "CloudGoat cgidz8xnxmfsym Security Group for EC2 Instance over SSH"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "130.237.6.63/32",
                ]
              + description      = ""
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "cg-ec2-ssh-cgidz8xnxmfsym"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name"     = "cg-ec2-ssh-cgidz8xnxmfsym"
          + "Scenario" = "cloud-breach-s3"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.cg-public-subnet-1 will be created
  + resource "aws_subnet" "cg-public-subnet-1" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.10.10.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name"     = "CloudGoat cgidz8xnxmfsym Public Subnet #1"
          + "Scenario" = "cloud-breach-s3"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.cg-public-subnet-2 will be created
  + resource "aws_subnet" "cg-public-subnet-2" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.10.20.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name"     = "CloudGoat cgidz8xnxmfsym Public Subnet #2"
          + "Scenario" = "cloud-breach-s3"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_vpc.cg-vpc will be created
  + resource "aws_vpc" "cg-vpc" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "10.10.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = (known after apply)
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = true
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags                             = {
          + "Name"     = "CloudGoat cgidz8xnxmfsym VPC"
          + "Scenario" = "cloud-breach-s3"
          + "Stack"    = "CloudGoat"
        }
    }
