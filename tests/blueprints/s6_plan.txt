Terraform will perform the following actions:

  # aws_codebuild_project.cg-codebuild-project will be created
  + resource "aws_codebuild_project" "cg-codebuild-project" {
      + arn            = (known after apply)
      + badge_enabled  = false
      + badge_url      = (known after apply)
      + build_timeout  = 20
      + description    = (known after apply)
      + encryption_key = (known after apply)
      + id             = (known after apply)
      + name           = "cg-codebuild-cgid5cyzt2537l"
      + service_role   = (known after apply)
      + tags           = {
          + "Name"     = "cg-codebuild-cgid5cyzt2537l"
          + "Scenario" = "codebuild-secrets"
          + "Stack"    = "CloudGoat"
        }

      + artifacts {
          + encryption_disabled    = false
          + override_artifact_name = false
          + type                   = "NO_ARTIFACTS"
        }

      + environment {
          + compute_type                = "BUILD_GENERAL1_SMALL"
          + image                       = "aws/codebuild/standard:1.0"
          + image_pull_credentials_type = "CODEBUILD"
          + privileged_mode             = false
          + type                        = "LINUX_CONTAINER"

          + environment_variable {
              + name  = "calrissian-aws-access-key"
              + type  = "PLAINTEXT"
              + value = (known after apply)
            }
          + environment_variable {
              + name  = "calrissian-aws-secret-key"
              + type  = "PLAINTEXT"
              + value = (known after apply)
            }
        }

      + source {
          + buildspec = <<~EOT
                version: 0.2
                
                phases:
                  pre_build:
                    commands:
                      - echo "This is CloudGoat's simpliest buildspec file ever (maybe)"
            EOT
          + type      = "NO_SOURCE"
        }
    }

  # aws_db_instance.cg-psql-rds will be created
  + resource "aws_db_instance" "cg-psql-rds" {
      + address                               = (known after apply)
      + allocated_storage                     = 20
      + apply_immediately                     = true
      + arn                                   = (known after apply)
      + auto_minor_version_upgrade            = true
      + availability_zone                     = (known after apply)
      + backup_retention_period               = (known after apply)
      + backup_window                         = (known after apply)
      + ca_cert_identifier                    = (known after apply)
      + character_set_name                    = (known after apply)
      + copy_tags_to_snapshot                 = false
      + db_subnet_group_name                  = (known after apply)
      + endpoint                              = (known after apply)
      + engine                                = "postgres"
      + engine_version                        = "9.6"
      + hosted_zone_id                        = (known after apply)
      + id                                    = (known after apply)
      + identifier                            = "cg-rds-instance-cgid5cyzt2537l"
      + identifier_prefix                     = (known after apply)
      + instance_class                        = "db.t2.micro"
      + kms_key_id                            = (known after apply)
      + license_model                         = (known after apply)
      + maintenance_window                    = (known after apply)
      + monitoring_interval                   = 0
      + monitoring_role_arn                   = (known after apply)
      + multi_az                              = false
      + name                                  = "securedb"
      + option_group_name                     = (known after apply)
      + parameter_group_name                  = (known after apply)
      + password                              = (sensitive value)
      + performance_insights_enabled          = false
      + performance_insights_kms_key_id       = (known after apply)
      + performance_insights_retention_period = (known after apply)
      + port                                  = 5432
      + publicly_accessible                   = false
      + replicas                              = (known after apply)
      + resource_id                           = (known after apply)
      + skip_final_snapshot                   = true
      + status                                = (known after apply)
      + storage_type                          = "gp2"
      + tags                                  = {
          + "Name"     = "cg-rds-instance-cgid5cyzt2537l"
          + "Scenario" = "codebuild-secrets"
          + "Stack"    = "CloudGoat"
        }
      + timezone                              = (known after apply)
      + username                              = "cgadmin"
      + vpc_security_group_ids                = (known after apply)
    }

  # aws_db_subnet_group.cg-rds-subnet-group will be created
  + resource "aws_db_subnet_group" "cg-rds-subnet-group" {
      + arn         = (known after apply)
      + description = "CloudGoat cgid5cyzt2537l Subnet Group"
      + id          = (known after apply)
      + name        = "cloud-goat-rds-subnet-group-cgid5cyzt2537l"
      + name_prefix = (known after apply)
      + subnet_ids  = (known after apply)
    }

  # aws_db_subnet_group.cg-rds-testing-subnet-group will be created
  + resource "aws_db_subnet_group" "cg-rds-testing-subnet-group" {
      + arn         = (known after apply)
      + description = "CloudGoat cgid5cyzt2537l Subnet Group ONLY for Testing with Public Subnets"
      + id          = (known after apply)
      + name        = "cloud-goat-rds-testing-subnet-group-cgid5cyzt2537l"
      + name_prefix = (known after apply)
      + subnet_ids  = (known after apply)
    }

  # aws_iam_access_key.cg-calrissian will be created
  + resource "aws_iam_access_key" "cg-calrissian" {
      + encrypted_secret  = (known after apply)
      + id                = (known after apply)
      + key_fingerprint   = (known after apply)
      + secret            = (sensitive value)
      + ses_smtp_password = (sensitive value)
      + status            = (known after apply)
      + user              = "calrissian"
    }

  # aws_iam_access_key.cg-solo will be created
  + resource "aws_iam_access_key" "cg-solo" {
      + encrypted_secret  = (known after apply)
      + id                = (known after apply)
      + key_fingerprint   = (known after apply)
      + secret            = (sensitive value)
      + ses_smtp_password = (sensitive value)
      + status            = (known after apply)
      + user              = "solo"
    }

  # aws_iam_instance_profile.cg-ec2-instance-profile will be created
  + resource "aws_iam_instance_profile" "cg-ec2-instance-profile" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "cg-ec2-instance-profile-cgid5cyzt2537l"
      + path        = "/"
      + role        = "cg-ec2-role-cgid5cyzt2537l"
      + roles       = (known after apply)
      + unique_id   = (known after apply)
    }

  # aws_iam_policy.cg-calrissian-policy will be created
  + resource "aws_iam_policy" "cg-calrissian-policy" {
      + arn         = (known after apply)
      + description = "cg-calrissian-policy-cgid5cyzt2537l"
      + id          = (known after apply)
      + name        = "cg-calrissian-policy-cgid5cyzt2537l"
      + path        = "/"
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "rds:CreateDBSnapshot",
                          + "rds:DescribeDBInstances",
                          + "rds:ModifyDBInstance",
                          + "rds:RestoreDBInstanceFromDBSnapshot",
                          + "rds:DescribeDBSubnetGroups",
                          + "rds:CreateDBSecurityGroup",
                          + "rds:DeleteDBSecurityGroup",
                          + "rds:DescribeDBSecurityGroups",
                          + "rds:AuthorizeDBSecurityGroupIngress",
                          + "ec2:CreateSecurityGroup",
                          + "ec2:DeleteSecurityGroup",
                          + "ec2:DescribeSecurityGroups",
                          + "ec2:AuthorizeSecurityGroupIngress",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = "calrissian"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # aws_iam_policy.cg-ec2-role-policy will be created
  + resource "aws_iam_policy" "cg-ec2-role-policy" {
      + arn         = (known after apply)
      + description = "cg-ec2-role-policy-cgid5cyzt2537l"
      + id          = (known after apply)
      + name        = "cg-ec2-role-policy-cgid5cyzt2537l"
      + path        = "/"
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "lambda:ListFunctions",
                          + "lambda:GetFunction",
                          + "rds:DescribeDBInstances",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = "VisualEditor0"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # aws_iam_policy.cg-solo-policy will be created
  + resource "aws_iam_policy" "cg-solo-policy" {
      + arn         = (known after apply)
      + description = "cg-solo-policy-cgid5cyzt2537l"
      + id          = (known after apply)
      + name        = "cg-solo-policy-cgid5cyzt2537l"
      + path        = "/"
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "s3:ListAllMyBuckets",
                          + "ssm:DescribeParameters",
                          + "ssm:GetParameter",
                          + "codebuild:ListProjects",
                          + "codebuild:BatchGetProjects",
                          + "codebuild:ListBuilds",
                          + "ec2:DescribeInstances",
                          + "ec2:DescribeVpcs",
                          + "ec2:DescribeSubnets",
                          + "ec2:DescribeSecurityGroups",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = "solo"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # aws_iam_policy_attachment.cg-ec2-role-policy-attachment will be created
  + resource "aws_iam_policy_attachment" "cg-ec2-role-policy-attachment" {
      + id         = (known after apply)
      + name       = "cg-ec2-role-policy-attachment-cgid5cyzt2537l"
      + policy_arn = (known after apply)
      + roles      = [
          + "cg-ec2-role-cgid5cyzt2537l",
        ]
    }

  # aws_iam_role.cg-codebuild-role will be created
  + resource "aws_iam_role" "cg-codebuild-role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "codebuild.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "code-build-cg-cgid5cyzt2537l-service-role"
      + path                  = "/"
      + tags                  = {
          + "Name"     = "code-build-cg-cgid5cyzt2537l-service-role"
          + "Scenario" = "codebuild-secrets"
          + "Stack"    = "CloudGoat"
        }
      + unique_id             = (known after apply)
    }

  # aws_iam_role.cg-ec2-role will be created
  + resource "aws_iam_role" "cg-ec2-role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "cg-ec2-role-cgid5cyzt2537l"
      + path                  = "/"
      + tags                  = {
          + "Name"     = "cg-ec2-role-cgid5cyzt2537l"
          + "Scenario" = "codebuild-secrets"
          + "Stack"    = "CloudGoat"
        }
      + unique_id             = (known after apply)
    }

  # aws_iam_role.cg-lambda-role will be created
  + resource "aws_iam_role" "cg-lambda-role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "cg-lambda-role-cgid5cyzt2537l-service-role"
      + path                  = "/"
      + tags                  = {
          + "Name"     = "cg-lambda-role-cgid5cyzt2537l"
          + "Scenario" = "codebuild-secrets"
          + "Stack"    = "CloudGoat"
        }
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy.cg-codebuild-role-policy will be created
  + resource "aws_iam_role_policy" "cg-codebuild-role-policy" {
      + id     = (known after apply)
      + name   = "code-build-cg-cgid5cyzt2537l-policy"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "logs:CreateLogGroup",
                          + "logs:CreateLogStream",
                          + "logs:PutLogEvents",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "*",
                        ]
                    },
                  + {
                      + Action   = [
                          + "ec2:CreateNetworkInterface",
                          + "ec2:DescribeDhcpOptions",
                          + "ec2:DescribeNetworkInterfaces",
                          + "ec2:DeleteNetworkInterface",
                          + "ec2:DescribeSubnets",
                          + "ec2:DescribeSecurityGroups",
                          + "ec2:DescribeVpcs",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role   = "code-build-cg-cgid5cyzt2537l-service-role"
    }

  # aws_iam_user.cg-calrissian will be created
  + resource "aws_iam_user" "cg-calrissian" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "calrissian"
      + path          = "/"
      + tags          = {
          + "Name"     = "cg-calrissian-cgid5cyzt2537l"
          + "Scenario" = "codebuild-secrets"
          + "Stack"    = "CloudGoat"
        }
      + unique_id     = (known after apply)
    }

  # aws_iam_user.cg-solo will be created
  + resource "aws_iam_user" "cg-solo" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "solo"
      + path          = "/"
      + tags          = {
          + "Name"     = "cg-solo-cgid5cyzt2537l"
          + "Scenario" = "codebuild-secrets"
          + "Stack"    = "CloudGoat"
        }
      + unique_id     = (known after apply)
    }

  # aws_iam_user_policy_attachment.cg-calrissian-attachment will be created
  + resource "aws_iam_user_policy_attachment" "cg-calrissian-attachment" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + user       = "calrissian"
    }

  # aws_iam_user_policy_attachment.cg-solo-attachment will be created
  + resource "aws_iam_user_policy_attachment" "cg-solo-attachment" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + user       = "solo"
    }

  # aws_instance.cg-ubuntu-ec2 will be created
  + resource "aws_instance" "cg-ubuntu-ec2" {
      + ami                          = "ami-0a313d6098716f372"
      + arn                          = (known after apply)
      + associate_public_ip_address  = true
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + iam_instance_profile         = "cg-ec2-instance-profile-cgid5cyzt2537l"
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "cg-ec2-key-pair-cgid5cyzt2537l"
      + network_interface_id         = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = (known after apply)
      + tags                         = {
          + "Name"     = "cg-ubuntu-ec2-cgid5cyzt2537l"
          + "Scenario" = "codebuild-secrets"
          + "Stack"    = "CloudGoat"
        }
      + tenancy                      = (known after apply)
      + user_data                    = (known after apply)
      + volume_tags                  = {
          + "Name"     = "CloudGoat cgid5cyzt2537l EC2 Instance Root Device"
          + "Scenario" = "codebuild-secrets"
          + "Stack"    = "CloudGoat"
        }
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = true
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 8
          + volume_type           = "gp2"
        }
    }

  # aws_internet_gateway.cg-internet-gateway will be created
  + resource "aws_internet_gateway" "cg-internet-gateway" {
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name"     = "CloudGoat cgid5cyzt2537l Internet Gateway"
          + "Scenario" = "codebuild-secrets"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id   = (known after apply)
    }

  # aws_key_pair.cg-ec2-key-pair will be created
  + resource "aws_key_pair" "cg-ec2-key-pair" {
      + fingerprint = (known after apply)
      + id          = (known after apply)
      + key_name    = "cg-ec2-key-pair-cgid5cyzt2537l"
      + public_key  = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDWlI4ts4viG3f7O9qiI/dDxT///UxK9qGqcSiF3PRNsFgyA1NhVdyKB+Tr+v41ugwPZRsrD/WI/en6EwWbqy5g3Ll5x+rEPpeAg33pHB8qqsJOKdVwBJzkenl2wxBF7zdE/7ATL1nCVMLc9An89oS6RWQC2cxS1Co6Et/6299Ml5ACe4Ky+xxY+76yAQcrOP48firNy8H681Uv7vSPzAveOKeEcHUUv3po/42wkqnYS7HaSc27PGsMeHYpLIcXQOaGTgafxCsbkIZ17vsPDONkn+YPt2AItZpjqHcUgUfFBeSUaUszjUJN/MY6IGBPgpFf8wbvBZMCguIXciZAkEyHn67mhKaTeaO6YtDIUivb+KRVR80s8yoXRYxM4yHSJwRYxYYiK2Ar43xwVyrU0At3xCuVWUrqbBl8GTAPzTg0xwA+a9X+6fPN5QPf945vCZ6CKx25x66L3jwtUvDT74iwGyhw0AdLVYEm3lERjWoEz4zadOuPOmYpJontD6Y8zOdu2xlgmsxstdQD3QcUlb6Obm6iTagsRowRMWupaD06B2rEY0ti7WbVmcCLDUu+QDK8rgxNP/iKR/AhDhDU4Z3hpXh5Uvhb5A+3hvRp94ubvrP0JGOH8pmC5HcH+jR/LARgvRcgcJSonoYEgxqlTOOx31hjhcF5ItJZx/YW4774fQ== viktor@viktor-Latitude-5490"
    }

  # aws_lambda_function.cg-lambda-function will be created
  + resource "aws_lambda_function" "cg-lambda-function" {
      + arn                            = (known after apply)
      + filename                       = "../assets/lambda.zip"
      + function_name                  = "cg-lambda-cgid5cyzt2537l"
      + handler                        = "lambda.handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.6"
      + source_code_hash               = "N3l99W/S7z8yvEwY1TLdVgLMk1WC3S1hjokcuc9bKGg="
      + source_code_size               = (known after apply)
      + tags                           = {
          + "Name"     = "cg-lambda-cgid5cyzt2537l"
          + "Scenario" = "codebuild-secrets"
          + "Stack"    = "CloudGoat"
        }
      + timeout                        = 3
      + version                        = (known after apply)

      + environment {
          + variables = {
              + "DB_NAME"     = "securedb"
              + "DB_PASSWORD" = "wagrrrrwwgahhhhwwwrrggawwwwwwrr"
              + "DB_USER"     = "cgadmin"
            }
        }

      + tracing_config {
          + mode = (known after apply)
        }
    }

  # aws_route_table.cg-private-subnet-route-table will be created
  + resource "aws_route_table" "cg-private-subnet-route-table" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Name"     = "CloudGoat cgid5cyzt2537l Route Table for Private Subnet"
          + "Scenario" = "codebuild-secrets"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table.cg-public-subnet-route-table will be created
  + resource "aws_route_table" "cg-public-subnet-route-table" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = (known after apply)
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = ""
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = {
          + "Name"     = "CloudGoat cgid5cyzt2537l Route Table for Public Subnet"
          + "Scenario" = "codebuild-secrets"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.cg-priate-subnet-1-route-association will be created
  + resource "aws_route_table_association" "cg-priate-subnet-1-route-association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.cg-priate-subnet-2-route-association will be created
  + resource "aws_route_table_association" "cg-priate-subnet-2-route-association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.cg-public-subnet-1-route-association will be created
  + resource "aws_route_table_association" "cg-public-subnet-1-route-association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.cg-public-subnet-2-route-association will be created
  + resource "aws_route_table_association" "cg-public-subnet-2-route-association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.cg-ec2-ssh-security-group will be created
  + resource "aws_security_group" "cg-ec2-ssh-security-group" {
      + arn                    = (known after apply)
      + description            = "CloudGoat cgid5cyzt2537l Security Group for EC2 Instance over SSH"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "130.237.6.91/32",
                ]
              + description      = ""
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "cg-ec2-ssh-cgid5cyzt2537l"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name"     = "cg-ec2-ssh-cgid5cyzt2537l"
          + "Scenario" = "codebuild-secrets"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.cg-rds-security-group will be created
  + resource "aws_security_group" "cg-rds-security-group" {
      + arn                    = (known after apply)
      + description            = "CloudGoat cgid5cyzt2537l Security Group for PostgreSQL RDS Instance"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "10.10.10.0/24",
                  + "10.10.20.0/24",
                  + "10.10.30.0/24",
                  + "10.10.40.0/24",
                ]
              + description      = ""
              + from_port        = 5432
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 5432
            },
          + {
              + cidr_blocks      = [
                  + "130.237.6.91/32",
                ]
              + description      = ""
              + from_port        = 5432
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 5432
            },
        ]
      + name                   = "cg-rds-psql-cgid5cyzt2537l"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + vpc_id                 = (known after apply)
    }

  # aws_ssm_parameter.cg-ec2-private-key will be created
  + resource "aws_ssm_parameter" "cg-ec2-private-key" {
      + arn         = (known after apply)
      + description = "cg-ec2-private-key-cgid5cyzt2537l"
      + id          = (known after apply)
      + key_id      = (known after apply)
      + name        = "cg-ec2-private-key-cgid5cyzt2537l"
      + tags        = {
          + "Name"     = "cg-ec2-private-key-cgid5cyzt2537l"
          + "Scenario" = "codebuild-secrets"
          + "Stack"    = "CloudGoat"
        }
      + tier        = "Standard"
      + type        = "String"
      + value       = (sensitive value)
      + version     = (known after apply)
    }

  # aws_ssm_parameter.cg-ec2-public-key will be created
  + resource "aws_ssm_parameter" "cg-ec2-public-key" {
      + arn         = (known after apply)
      + description = "cg-ec2-public-key-cgid5cyzt2537l"
      + id          = (known after apply)
      + key_id      = (known after apply)
      + name        = "cg-ec2-public-key-cgid5cyzt2537l"
      + tags        = {
          + "Name"     = "cg-ec2-public-key-cgid5cyzt2537l"
          + "Scenario" = "codebuild-secrets"
          + "Stack"    = "CloudGoat"
        }
      + tier        = "Standard"
      + type        = "String"
      + value       = (sensitive value)
      + version     = (known after apply)
    }

  # aws_subnet.cg-private-subnet-1 will be created
  + resource "aws_subnet" "cg-private-subnet-1" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.10.30.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name"     = "CloudGoat cgid5cyzt2537l Private Subnet #1"
          + "Scenario" = "codebuild-secrets"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.cg-private-subnet-2 will be created
  + resource "aws_subnet" "cg-private-subnet-2" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.10.40.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name"     = "CloudGoat cgid5cyzt2537l Private Subnet #2"
          + "Scenario" = "codebuild-secrets"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.cg-public-subnet-1 will be created
  + resource "aws_subnet" "cg-public-subnet-1" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.10.10.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name"     = "CloudGoat cgid5cyzt2537l Public Subnet #1"
          + "Scenario" = "codebuild-secrets"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.cg-public-subnet-2 will be created
  + resource "aws_subnet" "cg-public-subnet-2" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-east-1b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.10.20.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name"     = "CloudGoat cgid5cyzt2537l Public Subnet #2"
          + "Scenario" = "codebuild-secrets"
          + "Stack"    = "CloudGoat"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_vpc.cg-vpc will be created
  + resource "aws_vpc" "cg-vpc" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "10.10.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = (known after apply)
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = true
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags                             = {
          + "Name"     = "CloudGoat cgid5cyzt2537l VPC"
          + "Scenario" = "codebuild-secrets"
          + "Stack"    = "CloudGoat"
        }
    }

